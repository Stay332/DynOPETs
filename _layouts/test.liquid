---
layout: default
---
<!-- 预加载 Book Antiqua 字体 -->
<link rel="preload" href="https://fonts.googleapis.com/css2?family=Book+Antiqua&display=swap" as="style">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Book+Antiqua&display=swap">

<div class="test-container">
  <header class="test-header">
    <h1>{{ page.title }}</h1>
    {% if page.description %}
      <p class="description">{{ page.description }}</p>
    {% endif %}
  </header>

  {% if page.banner_image %}
  <div class="banner-section">
    <img src="{{ page.banner_image | relative_url }}" alt="Banner Image">
  </div>
  {% endif %}

  {% if page.gallery_grid %}
  <section class="gallery-grid">
    <h2>Grid layout display</h2>
    <div class="grid-container">
      {% for image in page.gallery_grid %}
      <div class="grid-item">
        <img src="{{ image.url | relative_url }}" alt="{{ image.caption }}">
        {% if image.caption %}
        <p class="caption">{{ image.caption }}</p>
        {% endif %}
      </div>
      {% endfor %}
    </div>
  </section>
  {% endif %}

  {% if page.gallery_masonry %}
  <section class="gallery-masonry">
    <h2>Waterfall layout display</h2>
    <div class="masonry-container">
      {% for image in page.gallery_masonry %}
      <div class="masonry-item">
        <img src="{{ image.url | relative_url }}" alt="{{ image.caption }}">
        {% if image.caption %}
        <p class="caption">{{ image.caption }}</p>
        {% endif %}
      </div>
      {% endfor %}
    </div>
  </section>
  {% endif %}

  {% if page.gallery_slider %}
  <section class="gallery-slider">
    <h2>Sliding display</h2>
    <div class="slider-container">
      <div class="slider-wrapper">
        {% for image in page.gallery_slider %}
        <div class="slide">
          <img src="{{ image.url | relative_url }}" alt="{{ image.caption }}">
          {% if image.caption %}
          <p class="caption">{{ image.caption }}</p>
          {% endif %}
        </div>
        {% endfor %}
      </div>
      <button class="slider-prev" aria-label="Previous slide">&#10094;</button>
      <button class="slider-next" aria-label="Next slide">&#10095;</button>
      <div class="slider-dots">
        {% assign total_dots = page.gallery_slider.size | minus: 2 %}
        {% for i in (0..total_dots) %}
        <span class="dot" data-index="{{ i }}"></span>
        {% endfor %}
      </div>
    </div>
  </section>
  {% endif %}

  {% if page.gallery_comparison %}
  <section class="gallery-comparison">
    <h2>Comparative display</h2>
    <div class="comparison-container">
      {% for pair in page.gallery_comparison %}
      <div class="comparison-pair">
        <div class="comparison-slider">
          <img class="comparison-before" src="{{ pair.before.url | relative_url }}" alt="{{ pair.before.caption }}">
          <img class="comparison-after" src="{{ pair.after.url | relative_url }}" alt="{{ pair.after.caption }}">
          <div class="comparison-handle">
            <div class="handle-line"></div>
            <div class="handle-circle">
              <span class="handle-arrows">⇄</span>
            </div>
          </div>
        </div>
        <div class="comparison-captions">
          <p class="caption-before">{{ pair.before.caption }}</p>
          <p class="caption-after">{{ pair.after.caption }}</p>
        </div>
      </div>
      {% endfor %}
    </div>
  </section>
  {% endif %}

  {% if page.pointcloud %}
  <section class="pointcloud-viewer">
    <h2>Pointcloud display</h2>
    <div id="pointcloud-container"></div>
  </section>
  {% endif %}

  <article class="content">
    {{ content }}
  </article>
</div>

<!-- Three.js 库 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/PLYLoader.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const sliderWrapper = document.querySelector('.slider-wrapper');
  const slides = document.querySelectorAll('.slide');
  const prevButton = document.querySelector('.slider-prev');
  const nextButton = document.querySelector('.slider-next');
  const dots = document.querySelectorAll('.dot');
  let currentIndex = 0;
  const slidesPerView = 3;
  const totalSlides = slides.length;
  const totalGroups = Math.max(1, Math.ceil((totalSlides - slidesPerView + 1) / 1));

  function showSlides(index) {
    currentIndex = index;
    const translateX = -(index * (100 / slidesPerView / 3));
    sliderWrapper.style.transform = `translateX(${translateX}%)`;
    
    // 更新圆点状态
    dots.forEach((dot, idx) => {
      // 计算当前应该激活哪个圆点
      const groupIndex = Math.floor(index / 1);
      if (idx === groupIndex) {
        dot.classList.add('active');
      } else {
        dot.classList.remove('active');
      }
    });

    // 更新按钮状态
    if (prevButton) {
      prevButton.style.display = index === 0 ? 'none' : 'flex';
    }
    if (nextButton) {
      nextButton.style.display = index >= totalSlides - slidesPerView ? 'none' : 'flex';
    }
  }

  // 初始化第一组为激活状态
  showSlides(0);

  // 添加按钮点击事件
  prevButton?.addEventListener('click', () => {
    if (currentIndex > 0) {
      showSlides(currentIndex - 1);
    }
  });

  nextButton?.addEventListener('click', () => {
    if (currentIndex < totalSlides - slidesPerView) {
      showSlides(currentIndex + 1);
    }
  });

  // 添加圆点点击事件
  dots.forEach((dot) => {
    dot.addEventListener('click', () => {
      const index = parseInt(dot.getAttribute('data-index'));
      showSlides(index);
    });
  });

  // 添加键盘控制
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft' && currentIndex > 0) {
      showSlides(currentIndex - 1);
    } else if (e.key === 'ArrowRight' && currentIndex < totalSlides - slidesPerView) {
      showSlides(currentIndex + 1);
    }
  });

  // 自动播放功能
  let autoplayInterval;

  function startAutoplay() {
    autoplayInterval = setInterval(() => {
      if (currentIndex < totalSlides - slidesPerView) {
        showSlides(currentIndex + 1);
      } else {
        showSlides(0);
      }
    }, 5000);
  }

  function stopAutoplay() {
    if (autoplayInterval) {
      clearInterval(autoplayInterval);
    }
  }

  // 开始自动播放
  startAutoplay();

  // 鼠标悬停时暂停自动播放
  const sliderContainer = document.querySelector('.slider-container');
  sliderContainer.addEventListener('mouseenter', stopAutoplay);
  sliderContainer.addEventListener('mouseleave', startAutoplay);

  // 图片对比滑动功能
  const comparisonSliders = document.querySelectorAll('.comparison-slider');
  
  comparisonSliders.forEach(slider => {
    const handle = slider.querySelector('.comparison-handle');
    const beforeImg = slider.querySelector('.comparison-before');
    let isResizing = false;
    let autoMoveInterval;
    let moveDirection = 1; // 1 表示向右移动，-1 表示向左移动
    let currentPosition = 50; // 初始位置 50%

    // 设置初始位置为50%
    handle.style.left = '50%';
    beforeImg.style.clipPath = 'inset(0 50% 0 0)';

    // 自动移动函数
    function startAutoMove() {
      autoMoveInterval = setInterval(() => {
        // 更新位置
        currentPosition += moveDirection * 0.5; // 每次移动 0.5%

        // 到达边界时改变方向
        if (currentPosition >= 100) {
          currentPosition = 100;
          moveDirection = -1;
        } else if (currentPosition <= 0) {
          currentPosition = 0;
          moveDirection = 1;
        }

        // 更新手柄和图片裁剪位置
        handle.style.left = `${currentPosition}%`;
        beforeImg.style.clipPath = `inset(0 ${100 - currentPosition}% 0 0)`;
      }, 30); // 每30毫秒更新一次，使移动更平滑
    }

    function stopAutoMove() {
      if (autoMoveInterval) {
        clearInterval(autoMoveInterval);
      }
    }

    // 开始自动移动
    startAutoMove();

    // 鼠标进入时停止自动移动
    slider.addEventListener('mouseenter', () => {
      stopAutoMove();
    });

    // 鼠标离开时恢复自动移动
    slider.addEventListener('mouseleave', () => {
      if (!isResizing) {
        startAutoMove();
      }
    });

    // 鼠标按下事件
    handle.addEventListener('mousedown', (e) => {
      isResizing = true;
      slider.classList.add('active');
      stopAutoMove();
    });

    // 鼠标移动事件
    document.addEventListener('mousemove', (e) => {
      if (!isResizing) return;

      const sliderRect = slider.getBoundingClientRect();
      const position = (e.clientX - sliderRect.left) / sliderRect.width;
      
      // 限制在0-1之间
      const clampedPosition = Math.max(0, Math.min(1, position));
      currentPosition = clampedPosition * 100;

      // 更新手柄和图片裁剪位置
      handle.style.left = `${currentPosition}%`;
      beforeImg.style.clipPath = `inset(0 ${100 - currentPosition}% 0 0)`;
    });

    // 鼠标松开事件
    document.addEventListener('mouseup', () => {
      if (isResizing) {
        isResizing = false;
        slider.classList.remove('active');
        // 鼠标松开后，如果鼠标不在滑块上，则恢复自动移动
        if (!slider.matches(':hover')) {
          startAutoMove();
        }
      }
    });

    // 触摸事件支持
    handle.addEventListener('touchstart', (e) => {
      isResizing = true;
      slider.classList.add('active');
      stopAutoMove();
    });

    document.addEventListener('touchmove', (e) => {
      if (!isResizing) return;
      e.preventDefault();

      const touch = e.touches[0];
      const sliderRect = slider.getBoundingClientRect();
      const position = (touch.clientX - sliderRect.left) / sliderRect.width;
      
      const clampedPosition = Math.max(0, Math.min(1, position));
      currentPosition = clampedPosition * 100;

      handle.style.left = `${currentPosition}%`;
      beforeImg.style.clipPath = `inset(0 ${100 - currentPosition}% 0 0)`;
    });

    document.addEventListener('touchend', () => {
      if (isResizing) {
        isResizing = false;
        slider.classList.remove('active');
        startAutoMove();
      }
    });
  });

  // 点云展示功能
  if (document.querySelector('#pointcloud-container')) {
    let scene, camera, renderer, controls;
    let pointCloud;

    function initPointCloud() {
      try {
        // 创建场景
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf0f0f0);

        // 创建相机
        const container = document.getElementById('pointcloud-container');
        const aspect = container.clientWidth / container.clientHeight;
        camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);
        camera.position.z = 5;

        // 创建渲染器
        renderer = new THREE.WebGLRenderer({ 
          antialias: true,
          alpha: true
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(container.clientWidth, container.clientHeight);
        container.appendChild(renderer.domElement);

        // 添加轨道控制器
        controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.screenSpacePanning = false;
        controls.minDistance = 1;
        controls.maxDistance = 50;

        // 添加环境光
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);

        // 添加坐标轴辅助（用于调试）
        const axesHelper = new THREE.AxesHelper(5);
        scene.add(axesHelper);

        console.log('开始加载PLY文件...');
        // 加载PLY文件
        const loader = new THREE.PLYLoader();
        loader.load(
          '{{ "/assets/pointcloud/nocs_coords.ply" | relative_url }}',
          function(geometry) {
            console.log('PLY文件加载成功');
            console.log('点的数量:', geometry.attributes.position.count);
            
            geometry.computeVertexNormals();

            const material = new THREE.PointsMaterial({
              size: 0.01,
              vertexColors: true,
              sizeAttenuation: true
            });

            pointCloud = new THREE.Points(geometry, material);
            scene.add(pointCloud);

            // 自动调整相机位置以适应点云大小
            const box = new THREE.Box3().setFromObject(pointCloud);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);
            
            camera.position.copy(center);
            camera.position.z += maxDim * 2;
            controls.target.copy(center);
            
            console.log('点云已添加到场景');
            console.log('包围盒大小:', size);
            console.log('相机位置:', camera.position);
          },
          function(xhr) {
            console.log((xhr.loaded / xhr.total * 100) + '% 已加载');
          },
          function(error) {
            console.error('加载PLY文件时出错:', error);
            const container = document.getElementById('pointcloud-container');
            container.innerHTML = '<div class="error-message">加载点云数据失败，请确保文件存在且格式正确。</div>';
          }
        );

        // 动画循环
        function animate() {
          requestAnimationFrame(animate);
          controls.update();
          renderer.render(scene, camera);
        }
        animate();

        // 窗口大小改变时调整渲染器大小
        window.addEventListener('resize', onWindowResize, false);
        function onWindowResize() {
          const container = document.getElementById('pointcloud-container');
          const aspect = container.clientWidth / container.clientHeight;
          camera.aspect = aspect;
          camera.updateProjectionMatrix();
          renderer.setSize(container.clientWidth, container.clientHeight);
        }

      } catch (error) {
        console.error('初始化点云展示时出错:', error);
        const container = document.getElementById('pointcloud-container');
        container.innerHTML = '<div class="error-message">初始化3D渲染器失败，请确保浏览器支持WebGL。</div>';
      }
    }

    // 初始化点云展示
    initPointCloud();
  }
});
</script> 