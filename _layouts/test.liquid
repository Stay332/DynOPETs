---
layout: default
---
<div class="test-container">
  <header class="test-header">
    <h1>{{ page.title }}</h1>
    {% if page.description %}
      <p class="description">{{ page.description }}</p>
    {% endif %}
  </header>

  {% if page.banner_image %}
  <div class="banner-section">
    <img src="{{ page.banner_image | relative_url }}" alt="Banner Image">
  </div>
  {% endif %}

  {% if page.gallery_grid %}
  <section class="gallery-grid">
    <h2>网格布局展示</h2>
    <div class="grid-container">
      {% for image in page.gallery_grid %}
      <div class="grid-item">
        <img src="{{ image.url | relative_url }}" alt="{{ image.caption }}">
        {% if image.caption %}
        <p class="caption">{{ image.caption }}</p>
        {% endif %}
      </div>
      {% endfor %}
    </div>
  </section>
  {% endif %}

  {% if page.gallery_masonry %}
  <section class="gallery-masonry">
    <h2>瀑布流布局展示</h2>
    <div class="masonry-container">
      {% for image in page.gallery_masonry %}
      <div class="masonry-item">
        <img src="{{ image.url | relative_url }}" alt="{{ image.caption }}">
        {% if image.caption %}
        <p class="caption">{{ image.caption }}</p>
        {% endif %}
      </div>
      {% endfor %}
    </div>
  </section>
  {% endif %}

  {% if page.gallery_slider %}
  <section class="gallery-slider">
    <h2>滑动展示</h2>
    <div class="slider-container">
      <div class="slider-wrapper">
        {% for image in page.gallery_slider %}
        <div class="slide">
          <img src="{{ image.url | relative_url }}" alt="{{ image.caption }}">
          {% if image.caption %}
          <p class="caption">{{ image.caption }}</p>
          {% endif %}
        </div>
        {% endfor %}
      </div>
      <button class="slider-prev" aria-label="Previous slide">&#10094;</button>
      <button class="slider-next" aria-label="Next slide">&#10095;</button>
      <div class="slider-dots">
        {% for image in page.gallery_slider %}
        <span class="dot" data-index="{{ forloop.index0 }}"></span>
        {% endfor %}
      </div>
    </div>
  </section>
  {% endif %}

  {% if page.gallery_comparison %}
  <section class="gallery-comparison">
    <h2>对比展示</h2>
    <div class="comparison-container">
      {% for pair in page.gallery_comparison %}
      <div class="comparison-pair">
        <div class="comparison-slider">
          <img class="comparison-before" src="{{ pair.before.url | relative_url }}" alt="{{ pair.before.caption }}">
          <img class="comparison-after" src="{{ pair.after.url | relative_url }}" alt="{{ pair.after.caption }}">
          <div class="comparison-handle">
            <div class="handle-line"></div>
            <div class="handle-circle">
              <span class="handle-arrows">⇄</span>
            </div>
          </div>
        </div>
        <div class="comparison-captions">
          <p class="caption-before">{{ pair.before.caption }}</p>
          <p class="caption-after">{{ pair.after.caption }}</p>
        </div>
      </div>
      {% endfor %}
    </div>
  </section>
  {% endif %}

  <article class="content">
    {{ content }}
  </article>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const sliderWrapper = document.querySelector('.slider-wrapper');
  const slides = document.querySelectorAll('.slide');
  const prevButton = document.querySelector('.slider-prev');
  const nextButton = document.querySelector('.slider-next');
  const dots = document.querySelectorAll('.dot');
  let currentSlide = 0;

  function showSlide(index) {
    currentSlide = index;
    sliderWrapper.style.transform = `translateX(-${index * 100}%)`;
    
    // 更新圆点状态
    dots.forEach((dot, idx) => {
      if (idx === index) {
        dot.classList.add('active');
      } else {
        dot.classList.remove('active');
      }
    });
  }

  // 初始化第一个圆点为激活状态
  showSlide(0);

  // 添加按钮点击事件
  prevButton?.addEventListener('click', () => {
    const newIndex = (currentSlide - 1 + slides.length) % slides.length;
    showSlide(newIndex);
  });

  nextButton?.addEventListener('click', () => {
    const newIndex = (currentSlide + 1) % slides.length;
    showSlide(newIndex);
  });

  // 添加圆点点击事件
  dots.forEach((dot) => {
    dot.addEventListener('click', () => {
      const index = parseInt(dot.getAttribute('data-index'));
      showSlide(index);
    });
  });

  // 添加键盘控制
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      const newIndex = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(newIndex);
    } else if (e.key === 'ArrowRight') {
      const newIndex = (currentSlide + 1) % slides.length;
      showSlide(newIndex);
    }
  });

  // 自动播放功能
  let autoplayInterval;

  function startAutoplay() {
    autoplayInterval = setInterval(() => {
      const newIndex = (currentSlide + 1) % slides.length;
      showSlide(newIndex);
    }, 5000);
  }

  function stopAutoplay() {
    if (autoplayInterval) {
      clearInterval(autoplayInterval);
    }
  }

  // 开始自动播放
  startAutoplay();

  // 鼠标悬停时暂停自动播放
  const sliderContainer = document.querySelector('.slider-container');
  sliderContainer.addEventListener('mouseenter', stopAutoplay);
  sliderContainer.addEventListener('mouseleave', startAutoplay);

  // 图片对比滑动功能
  const comparisonSliders = document.querySelectorAll('.comparison-slider');
  
  comparisonSliders.forEach(slider => {
    const handle = slider.querySelector('.comparison-handle');
    const beforeImg = slider.querySelector('.comparison-before');
    let isResizing = false;
    let autoMoveInterval;
    let moveDirection = 1; // 1 表示向右移动，-1 表示向左移动
    let currentPosition = 50; // 初始位置 50%

    // 设置初始位置为50%
    handle.style.left = '50%';
    beforeImg.style.clipPath = 'inset(0 50% 0 0)';

    // 自动移动函数
    function startAutoMove() {
      autoMoveInterval = setInterval(() => {
        // 更新位置
        currentPosition += moveDirection * 0.5; // 每次移动 0.5%

        // 到达边界时改变方向
        if (currentPosition >= 100) {
          currentPosition = 100;
          moveDirection = -1;
        } else if (currentPosition <= 0) {
          currentPosition = 0;
          moveDirection = 1;
        }

        // 更新手柄和图片裁剪位置
        handle.style.left = `${currentPosition}%`;
        beforeImg.style.clipPath = `inset(0 ${100 - currentPosition}% 0 0)`;
      }, 30); // 每30毫秒更新一次，使移动更平滑
    }

    function stopAutoMove() {
      if (autoMoveInterval) {
        clearInterval(autoMoveInterval);
      }
    }

    // 开始自动移动
    startAutoMove();

    // 鼠标进入时停止自动移动
    slider.addEventListener('mouseenter', () => {
      stopAutoMove();
    });

    // 鼠标离开时恢复自动移动
    slider.addEventListener('mouseleave', () => {
      if (!isResizing) {
        startAutoMove();
      }
    });

    // 鼠标按下事件
    handle.addEventListener('mousedown', (e) => {
      isResizing = true;
      slider.classList.add('active');
      stopAutoMove();
    });

    // 鼠标移动事件
    document.addEventListener('mousemove', (e) => {
      if (!isResizing) return;

      const sliderRect = slider.getBoundingClientRect();
      const position = (e.clientX - sliderRect.left) / sliderRect.width;
      
      // 限制在0-1之间
      const clampedPosition = Math.max(0, Math.min(1, position));
      currentPosition = clampedPosition * 100;

      // 更新手柄和图片裁剪位置
      handle.style.left = `${currentPosition}%`;
      beforeImg.style.clipPath = `inset(0 ${100 - currentPosition}% 0 0)`;
    });

    // 鼠标松开事件
    document.addEventListener('mouseup', () => {
      if (isResizing) {
        isResizing = false;
        slider.classList.remove('active');
        // 鼠标松开后，如果鼠标不在滑块上，则恢复自动移动
        if (!slider.matches(':hover')) {
          startAutoMove();
        }
      }
    });

    // 触摸事件支持
    handle.addEventListener('touchstart', (e) => {
      isResizing = true;
      slider.classList.add('active');
      stopAutoMove();
    });

    document.addEventListener('touchmove', (e) => {
      if (!isResizing) return;
      e.preventDefault();

      const touch = e.touches[0];
      const sliderRect = slider.getBoundingClientRect();
      const position = (touch.clientX - sliderRect.left) / sliderRect.width;
      
      const clampedPosition = Math.max(0, Math.min(1, position));
      currentPosition = clampedPosition * 100;

      handle.style.left = `${currentPosition}%`;
      beforeImg.style.clipPath = `inset(0 ${100 - currentPosition}% 0 0)`;
    });

    document.addEventListener('touchend', () => {
      if (isResizing) {
        isResizing = false;
        slider.classList.remove('active');
        startAutoMove();
      }
    });
  });
});
</script> 